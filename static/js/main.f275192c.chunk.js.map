{"version":3,"sources":["components/title.jsx","components/emoji.jsx","components/searchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Test","firstEmoji","Math","floor","random","secondEmoji","emojis","Object","keys","data","map","key","firstEmojiSrc","secondEmojiSrc","react_default","a","createElement","style","marginTop","paddingBottom","alt","verticalAlign","src","paddingLeft","paddingRight","fontSize","display","className","Emoji","_ref","emoji","textAlign","marginLeft","charAt","toUpperCase","slice","SearchBox","state","searched","onChange","e","target","value","toLowerCase","_this","setState","_this2","this","arrayPng","forEach","indexOf","push","el","id","type","aria-label","aria-describedby","index","components_emoji","Component","App","title","searchBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f275192c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport data from \"../emojis.json\";\r\n\r\nconst Test = () => {\r\n  const firstEmoji = Math.floor(Math.random() * 884);\r\n  const secondEmoji = Math.floor(Math.random() * 884);\r\n  const emojis = Object.keys(data).map(key => [key, data[key]]);\r\n  const firstEmojiSrc = \"emojis/\" + emojis[firstEmoji][0] + \".png\";\r\n  const secondEmojiSrc = \"emojis/\" + emojis[secondEmoji][0] + \".png\";\r\n  return (\r\n    <div style={{ marginTop: 20, paddingBottom: 30 }}>\r\n      <img\r\n        alt=\"emoji\"\r\n        style={{\r\n          verticalAlign: \"middle\"\r\n        }}\r\n        src={firstEmojiSrc}\r\n      />\r\n      <h1\r\n        style={{\r\n          paddingLeft: 15,\r\n          paddingRight: 15,\r\n          fontSize: 30,\r\n          display: \"inline\"\r\n        }}\r\n        className=\"display-4\"\r\n      >\r\n        Welcome on the Emoji Search\r\n      </h1>\r\n      <img\r\n        alt=\"emoji\"\r\n        style={{\r\n          verticalAlign: \"middle\"\r\n        }}\r\n        src={secondEmojiSrc}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","import React from \"react\";\r\n\r\nconst Emoji = ({ emoji }) => {\r\n  return (\r\n    <li className=\"list-group-item pl-5\" style={{ textAlign: \"left\" }}>\r\n      <img alt=\"emoji\" src={\"emojis/\" + emoji + \".png\"} />\r\n      <span style={{ verticalAlign: \"middle\", marginLeft: 10 }}>\r\n        {emoji.charAt(0).toUpperCase() + emoji.slice(1)}\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Emoji;\r\n","import React, { Component } from \"react\";\r\nimport data from \"../emojis.json\";\r\nimport Emoji from \"./emoji.jsx\";\r\n\r\nclass SearchBox extends Component {\r\n  state = { searched: \"\" };\r\n  onChange = e => {\r\n    const searched = e.target.value.toLowerCase();\r\n    this.setState({ searched });\r\n  };\r\n  render() {\r\n    const emojis = Object.keys(data).map(key => [key, data[key]]);\r\n    let arrayPng = [];\r\n    emojis.forEach(emoji => {\r\n      if (emoji[0].indexOf(this.state.searched) === 0) {\r\n        arrayPng.push(emoji[0]);\r\n      }\r\n      emoji[1].forEach(el => {\r\n        if (el.indexOf(this.state.searched) === 0) {\r\n          if (arrayPng.indexOf(emoji[0]) === -1) arrayPng.push(emoji[0]);\r\n        }\r\n      });\r\n    });\r\n    return (\r\n      <div style={{ marginTop: 30, paddingLeft: 25, paddingRight: 25 }}>\r\n        <div className=\"input-group input-group-lg\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">\r\n              Search by keyword\r\n            </span>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            aria-label=\"Large\"\r\n            aria-describedby=\"inputGroup-sizing-sm\"\r\n            onChange={this.onChange}\r\n            value={this.state.searched}\r\n          />\r\n        </div>\r\n        <ul className=\"list-group mt-3\">\r\n          {this.state.searched !== \"\" &&\r\n            arrayPng.map((emoji, index) => <Emoji key={index} emoji={emoji} />)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Test from \"./components/title\";\nimport SearchBox from \"./components/searchBox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Test />\n      <SearchBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}